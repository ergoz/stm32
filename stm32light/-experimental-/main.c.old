#include "stm32f10x.h"
#include "stm32f10x_gpio.h"
#include "stm32f10x_rcc.h"
#include "stm32f10x_tim.h"
#include "motion.h"
#include "led.h"
#include "timer.h"

void InitAll( void);
void InitTimer2GPIO(void);
void SetTimer2Duty(int duty, int channel);
void Delay( unsigned int Val);

int main(void)
{
	int state=1;
	int val=0;

	vMotionInit();
	vLedInit();
	vTimerInit();

	InitAll();
	InitTimer2GPIO();

    while(1)
    {
//    	SetTimer2Duty(val);
//
//    	if (state)
//    	{
//    		val++;
//    		if (val==100)
//    			state=!state;
//    	}
//    	else
//    	{
//    		val--;
//    		if (val==0)
//    			state=!state;
//    	}
//    	Delay(10000);

//    	if (GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_13) == 1)
//    	{
//    		SetTimer2Duty(100);
//    		GPIO_SetBits( GPIOB, GPIO_Pin_1);
//
//    		GPIO_SetBits( GPIOA, GPIO_Pin_0);
//    		Delay( 500000);
//    		GPIO_ResetBits( GPIOA, GPIO_Pin_0);
//
//    		GPIO_SetBits( GPIOA, GPIO_Pin_1);
//    		Delay( 500000);
//    		GPIO_ResetBits( GPIOA, GPIO_Pin_1);
//
//    		GPIO_SetBits( GPIOA, GPIO_Pin_2);
//    		Delay( 500000);
//    		GPIO_ResetBits( GPIOB, GPIO_Pin_1);
//
//    		GPIO_ResetBits( GPIOA, GPIO_Pin_2);
//    	}
//    	else
//    		SetTimer2Duty(0);


    	if (GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_11) == 0)
    	{
    		state=!state;

    		if (state)
    		{
    			SetTimer2Duty(100, 2);
    			Delay(1000000);
    			SetTimer2Duty(0, 2);
    		}
    		else
    		{
    			SetTimer2Duty(100, 1);
    			Delay(1000000);
    			SetTimer2Duty(0, 1);
    		}

    		while (GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_11)!=1);
    	}

    	if (state)
    	{
			if (GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_13) == 1)
			{
				for (val=0; val<100; val++)
				{
					SetTimer2Duty(val, 0);
					Delay(30000);
				}
				SetTimer2Duty(100, 0);
				Delay(50000000);
				for (val=100; val>1; val--)
				{
					SetTimer2Duty(val, 0);
					Delay(30000);
				}
				SetTimer2Duty(0, 0);
			}
		}
    }
}

void InitAll( void) {
  GPIO_InitTypeDef GPIO_InitStructure;

  // Enable PORTB Periph clock
  RCC_APB2PeriphClockCmd( RCC_APB2Periph_GPIOB, ENABLE);
  RCC_APB2PeriphClockCmd( RCC_APB2Periph_GPIOA, ENABLE);

//  // Configure PB.11 as Input (this is BTN)
//  GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_11;
//  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
//  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
//  GPIO_Init( GPIOB, &GPIO_InitStructure);


//
//  // Configure PB.1 as Push Pull output at max 10Mhz (this is internal LED)
//  GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_1;
//  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
//  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
//  GPIO_Init( GPIOB, &GPIO_InitStructure);
//
//  // Configure PA.0 as Push Pull output at max 10Mhz (this is LED Strip)
//  GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_0;
//  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
//  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
//  GPIO_Init( GPIOA, &GPIO_InitStructure);
//  // Configure PA.1 as Push Pull output at max 10Mhz (this is LED Strip)
//  GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_1;
//  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
//  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
//  GPIO_Init( GPIOA, &GPIO_InitStructure);
//  // Configure PA.2 as Push Pull output at max 10Mhz (this is LED Strip)
//  GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_2;
//  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
//  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
//  GPIO_Init( GPIOA, &GPIO_InitStructure);

  return;
}

void InitTimer2GPIO(void)
{
	  GPIO_InitTypeDef GPIO_InitStructure;

	  // Enable PORTA Periph clock
	  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
	  RCC_APB2PeriphClockCmd( RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, ENABLE);

	  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2;
      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
      GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
      GPIO_Init(GPIOA, &GPIO_InitStructure);
}

void SetTimer2Duty(int duty, int channel)
{
	TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
	TIM_OCInitTypeDef  TIM_OCInitStructure;

	TIM_Cmd(TIM2, DISABLE);

    /* Time base configuration */
    TIM_TimeBaseStructure.TIM_Period = 400;
    TIM_TimeBaseStructure.TIM_Prescaler = (uint16_t) (SystemCoreClock / 24000000) - 1;
    TIM_TimeBaseStructure.TIM_ClockDivision = 0;
    TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;

    TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);

    /* PWM1 Mode configuration: Channel1 */
    TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
    TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
    TIM_OCInitStructure.TIM_Pulse = duty<<2;
    if (TIM_OCInitStructure.TIM_Pulse>TIM_TimeBaseStructure.TIM_Period)
    	TIM_OCInitStructure.TIM_Pulse=TIM_TimeBaseStructure.TIM_Period-1;
    TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;

    if (channel==0)
    {
		TIM_OC1Init(TIM2, &TIM_OCInitStructure);
		TIM_OC1PreloadConfig(TIM2, TIM_OCPreload_Enable);
		TIM_OC2Init(TIM2, &TIM_OCInitStructure);
		TIM_OC2PreloadConfig(TIM2, TIM_OCPreload_Enable);
		TIM_OC3Init(TIM2, &TIM_OCInitStructure);
		TIM_OC3PreloadConfig(TIM2, TIM_OCPreload_Enable);
    }
    else if (channel==1)
    {
        TIM_OC1Init(TIM2, &TIM_OCInitStructure);
        TIM_OC1PreloadConfig(TIM2, TIM_OCPreload_Enable);
    }
    else if (channel==2)
    {
        TIM_OC2Init(TIM2, &TIM_OCInitStructure);
        TIM_OC2PreloadConfig(TIM2, TIM_OCPreload_Enable);
    }
    else if (channel==3)
    {
        TIM_OC3Init(TIM2, &TIM_OCInitStructure);
        TIM_OC3PreloadConfig(TIM2, TIM_OCPreload_Enable);
    }

    TIM_ARRPreloadConfig(TIM2, ENABLE);

    /* TIM3 enable counter */
    TIM_Cmd(TIM2, ENABLE);

}

void Delay( unsigned int Val) {
  for( ; Val != 0; Val--) {
    __NOP();
  }
}
